#ifndef UlxrIdlTestUlxrServer_H
#define UlxrIdlTestUlxrServer_H

///////////////////////////////////////////////////////////////////
// Automatically generated by xml2ulxr v1.7.5.
//
// xml2ulxr is part of Ultra Lightweight XML RPC for C++.
// See also http://ulxmlrpcpp.sourceforge.net
//
// Don't edit manually unless you know what you are doing
///////////////////////////////////////////////////////////////////


//#define ULXR_UNICODE_ONLY_HELPERS
#include <ulxmlrpcpp/ulxmlrpcpp.h> // always first

namespace myname
{
  class UlxrIdlTest;
}


namespace ulxr
{
  class MethodAdder;
  class MethodCall;
  class MethodResponse;
}

class UlxrIdlTestServer
{
  public:

    UlxrIdlTestServer(ulxr::MethodAdder &method_adder, myname::UlxrIdlTest &server);

    ~UlxrIdlTestServer();

    // mapped to: void first_url4();   (there are overloaded methods)
    ulxr::MethodResponse first_url4_ovr4 (const ulxr::MethodCall &calldata);

    // mapped to: std::string * first_url4(int i);   (there are overloaded methods)
    ulxr::MethodResponse first_url4_ovr3 (const ulxr::MethodCall &calldata);

    // mapped to: std::string * first_url4(long int li);   (there are overloaded methods)
    ulxr::MethodResponse first_url4_ovr2 (const ulxr::MethodCall &calldata);

    // mapped to: const char * first_url4(float li);   (there are overloaded methods)
    ulxr::MethodResponse first_url4_ovr1 (const ulxr::MethodCall &calldata);

    // mapped to: wchar_t * const first_url4(double li);   (there are overloaded methods)
    ulxr::MethodResponse first_url4_ovr0 (const ulxr::MethodCall &calldata);

    // mapped to: std::string constTest() const;
    ulxr::MethodResponse constTest (const ulxr::MethodCall &calldata);

    // mapped to: std::string & constRefTest() const;
    ulxr::MethodResponse constRefTest (const ulxr::MethodCall &calldata);

    // mapped to: long int * firstViewConst() const;
    ulxr::MethodResponse firstViewConst (const ulxr::MethodCall &calldata);

    // mapped to: std::string * firstView();
    ulxr::MethodResponse firstView (const ulxr::MethodCall &calldata);

    // mapped to: std::wstring * nextView1(int i, long int * l, std::string & s, const bool * b, char c) const;
    ulxr::MethodResponse nextView1 (const ulxr::MethodCall &calldata);

    // mapped to: std::basic_string<char> * nextView2(int i, long int l, std::string & s, bool * const b, char c) const;
    ulxr::MethodResponse nextView2 (const ulxr::MethodCall &calldata);

    // mapped to: void getNumObjects(std::string s);
    ulxr::MethodResponse getNumObjects (const ulxr::MethodCall &calldata);

    // mapped to: const std::basic_string<wchar_t> * getObject(const std::string & s);
    ulxr::MethodResponse getObject (const ulxr::MethodCall &calldata);

    // mapped to: int getNumPages(const std::wstring & s);
    ulxr::MethodResponse getNumPages (const ulxr::MethodCall &calldata);

    // mapped to: const std::string * last_url4();   (there are overloaded methods)
    ulxr::MethodResponse last_url4_ovr0 (const ulxr::MethodCall &calldata);

    // mapped to: std::string * last_url4(int i);   (there are overloaded methods)
    ulxr::MethodResponse last_url4_ovr1 (const ulxr::MethodCall &calldata);

    // mapped to: std::string * last_url4(long int li);   (there are overloaded methods)
    ulxr::MethodResponse last_url4_ovr2 (const ulxr::MethodCall &calldata);

 private:

    void setupServerMethods();
    void removeServerMethods();

  private:

    mutable std::string ulxr_refFor_constRefTest;
    myname::UlxrIdlTest &server;
    ulxr::MethodAdder &method_adder;
};

#endif // UlxrIdlTestUlxrServer_H

